package dk.tweenstyle.android.app.dao.test;

import java.util.List;
import java.util.Map;

import junit.framework.Assert;
import junit.framework.TestCase;
import android.util.Base64;
import dk.tweenstyle.android.app.dao.MainJSONLoader;
import dk.tweenstyle.android.app.dao.MemoryDAO;
import dk.tweenstyle.android.app.model.Discount;
import dk.tweenstyle.android.app.model.Group;
import dk.tweenstyle.android.app.model.Product;
import dk.tweenstyle.android.app.model.Settings;

public class MainJSONLoaderTest extends TestCase {
	private MainJSONLoader l;
	private String encodedData = "";
	
	// @BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}
	
	// @AfterClass
	public static void tearDownAfterClass() throws Exception {
	}
	
	// @Before
	public void setUp() throws Exception {
		this.l = new MainJSONLoader();
	}
	
	// @After
	public void tearDown() throws Exception {
	}
	
	// @Test
	public void test() {
		byte[] byteData = Base64.decode(encodedData, Base64.DEFAULT);
		String data = new String(byteData);
		
		MemoryDAO dao = this.l.loadJSONData(data);
		
		Assert.assertNotNull(dao);
		
		List<Discount> discounts = dao.getDiscounts();
		
		Assert.assertNotNull(discounts);
		
		Assert.assertEquals(2, discounts.size());
		
		Discount discount = discounts.get(0);
		
		Assert.assertNotNull(discount);
		
		Assert.assertEquals("10% rabat", discount.getName());
		Assert.assertEquals("Percentage", discount.getType());
		Assert.assertEquals(0.0, discount.getPriceFixed());
		Assert.assertEquals(10.0, discount.getPricePercentage());
		Assert.assertEquals("SALESDISCNT15", discount.getId());
		
		discount = discounts.get(1);
		
		Assert.assertNotNull(discount);
		
		Assert.assertEquals("100 dkk", discount.getName());
		Assert.assertEquals("Fixed", discount.getType());
		Assert.assertEquals(100.0, discount.getPriceFixed());
		Assert.assertEquals(0.0, discount.getPricePercentage());
		Assert.assertEquals("SALESDISCNT16", discount.getId());
		
		List<Product> products = dao.getProducts();
		
		Assert.assertNotNull(products);
		
		Assert.assertEquals(4, products.size());
		
		for (Product product : products) {
			Assert.assertNotNull(product);
			Assert.assertNotNull(product.getId());
			Assert.assertFalse(product.getId().length() <= 0);
		}
				
		Map<String, Group> groups = dao.getGroups();
		
		Assert.assertNotNull(groups);
		
		Assert.assertEquals(5, groups.size());
		
		for (Group group : groups.values()) {
			Assert.assertNotNull(group);
			Assert.assertNotNull(group.getId());
			Assert.assertFalse(group.getId().length() <= 0);
		}
		
		Settings settings = dao.getSettings();

		Assert.assertNotNull(settings);
		
		String value;
		
		value = settings.getValue(Settings.SETTINGS_KEY_BOYS_GROUP_ID);

		Assert.assertNotNull(value);
		
		Assert.assertEquals("GROUP357", value);
		
		
		value = settings.getValue(Settings.SETTINGS_KEY_BRANDS_GROUP_ID);

		Assert.assertNotNull(value);
		
		Assert.assertEquals("GROUP7", value);
		
		
		value = settings.getValue(Settings.SETTINGS_KEY_GIRLS_GROUP_ID);

		Assert.assertNotNull(value);
		
		Assert.assertEquals("GROUP356", value);
		
	}
	
}